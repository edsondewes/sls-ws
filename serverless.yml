service: sls-ws

dashboard:
  component: "@serverless/website"
  inputs:
    code:
      src: dist
      hook: npm run build

custom:
  #dynamodb:
  #  stages:
  #    - dev
  #  start:
  #    port: 8000
  #    migrate: true
  #    inMemory: true
  #serverless-offline-sqs:
  #  autoCreate: true
  #  apiVersion: "2012-11-05"
  #  endpoint: http://0.0.0.0:9324
  #  accessKeyId: root
  #  secretAccessKey: root
  #  skipCacheInvalidation: false
  env-stage: ${opt:stage, "prod"}
  env-configs:
    API_URL:
      prod: https://gpqiufp5b5.execute-api.us-east-1.amazonaws.com/prod
      dev: http://localhost:3001
    DDB_URL:
      prod: AAA
      dev: http://localhost:8000
    QUEUE_URL:
      prod: https://sqs.us-east-1.amazonaws.com/528347977406/MessageQueue
      dev: http://localhost:9324/queue/MessageQueue

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  websocketsApiName: sls-ws
  websocketsApiRouteSelectionExpression: $request.body.action
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/connectionsTable"
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
      Resource: "arn:aws:sqs:${self:provider.region}:528347977406:MessageQueue"
    - Effect: "Allow"
      Action:
        - "sqs:ListQueues"
      Resource: "arn:aws:sqs:${self:provider.region}:528347977406:*"
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
  environment:
    API_URL: ${self:custom.env-configs.API_URL.${self:custom.env-stage}}
    DDB_URL: ${self:custom.env-configs.DDB_URL.${self:custom.env-stage}}
    QUEUE_URL: ${self:custom.env-configs.QUEUE_URL.${self:custom.env-stage}}

plugins:
  #- serverless-dynamodb-local
  #- serverless-offline-sqs
  - serverless-offline

functions:
  connection:
    handler: handlers/wsHandler.connection
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  message:
    handler: handlers/wsHandler.message
    events:
      - websocket:
          route: $default

  reply:
    handler: handlers/wsHandler.reply
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MessageQueue
              - Arn

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connectionsTable
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MessageQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "MessageQueue"
