service: sls-ws

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true
      inMemory: true
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: "2012-11-05"
    endpoint: http://0.0.0.0:9324
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  websocketsApiName: sls-ws
  websocketsApiRouteSelectionExpression: $request.body.action
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/connectionsTable"
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
      Resource: "arn:aws:sqs:${self:provider.region}:*:MessageQueue"
    - Effect: "Allow"
      Action:
        - "sqs:ListQueues"
      Resource: "arn:aws:sqs:${self:provider.region}:*:*"
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource: "*"
  environment: ${file(./serverless.${self:custom.stage}.yml):env}
  tracing:
    apiGateway: true
    lambda: true

package:
  exclude:
    - .dynamodb/**

plugins:
  - serverless-dynamodb-local
  - serverless-offline-sqs
  - serverless-pseudo-parameters
  - serverless-offline

functions:
  connection:
    handler: src/wsHandler.connection
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  message:
    handler: src/wsHandler.message
    events:
      - websocket:
          route: $default

  reply:
    handler: src/wsHandler.reply
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MessageQueue
              - Arn

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connectionsTable
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MessageQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "MessageQueue"
